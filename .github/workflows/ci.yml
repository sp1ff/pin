# This is the continuous integration job for `pin`. It runs on Ubuntu
# & MacOS, using three versions of Rust: a "pinned", least supported
# version, the current stable version and the current nightly. After
# building, it will run the unit test suite as well as the Autotools
# `distcheck`. Many thanks to BurntShushi from whom I shamelessly
# copied a lot of this
# <https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/ci.yml>
name: Continuous Integration

on:
  workflow_dispatch:
  pull_request:
    types: [opened, edited, reopened] # don't say `synchronize`-- that is taken care of by `push`
  push:
  schedule:
    - cron: '35 01 * * *'

jobs:
  build:
    name: build
    strategy:
      matrix:
        rust-build:
          - pinned
          - stable
          - nightly
        os: [ubuntu-22.04, macos-12]
        include:
        - rust-build: pinned
          os: ubuntu-22.04
          rust: 1.65
        - rust-build: stable
          os: ubuntu-22.04
          rust: stable
        - rust-build: nightly
          os: ubuntu-22.04
          rust: nightly
        - rust-build: pinned
          os: macos-12
          rust: 1.65
        - rust-build: stable
          os: macos-12
          rust: stable
        - rust-build: nightly
          os: macos-12
          rust: nightly
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: 1
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Install Tools (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      shell: bash
      run: |
          set -x
          sudo apt-get update
          sudo apt-get install -y autoconf automake emacs liblzma-dev texlive

    - name: Install Tools (macOS)
      if: matrix.os == 'macos-12'
      shell: bash
      run: |
          set -x
          # Failure to do so causes `brew update` to fail
          brew link --overwrite --dry-run python@3.11
          rm '/usr/local/bin/2to3-3.11'
          rm '/usr/local/bin/2to3'
          rm '/usr/local/bin/idle3.11'
          rm '/usr/local/bin/idle3'
          rm '/usr/local/bin/pydoc3'
          rm '/usr/local/bin/pydoc3.11'
          rm '/usr/local/bin/python3'
          rm '/usr/local/bin/python3-config'
          rm '/usr/local/bin/python3.11'
          rm '/usr/local/bin/python3.11-config'
          brew update
          # brew upgrade <==: fails on Virtual Box(?)
          brew install autoconf automake emacs make
          brew install --cask basictex
          eval "$(/usr/libexec/path_helper)"

    - name: Install a modern version of Texinfo
      if: matrix.os == 'macos-12'
      shell: bash
      run: |
          set -x
          mkdir tmp && cd tmp
          # TODO(sp1ff): cache this
          curl -L -O https://ftp.gnu.org/gnu/texinfo/texinfo-7.0.2.tar.gz
          tar xf texinfo-7.0.2.tar.gz
          cd texinfo-7.0.2
          ./configure
          make
          make install
          type -p texi2dvi
          texi2dvi --version

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true

    - name: Configure pin
      shell: bash
      run: |
        set -x
        ./bootstrap && ./configure

    - name: Build pin
      run: make

    # Copied verbatim from ripgrep. BurntSushi says "This is useful
    # for debugging problems when the expected build artifacts (like
    # shell completions and man pages) aren't generated."
    - name: Show build.rs stderr
      shell: bash
      run: |
        set -x
        cd pin
        pwd
        stderr="$(find target/release -name stderr -print0 | xargs -0 ls -t | head -n1)"
        if [ -s "$stderr" ]; then
          echo "===== $stderr ===== "
          cat "$stderr"
          echo "====="
        fi

    - name: Run unit test suite
      shell: bash
      run: |
        set -x
        make check

    - name: Check the Autotools distribution (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      shell: bash
      run: make distcheck

    - name: Check the Autotools distribution (MacOS)
      if: matrix.os == 'macos-12'
      shell: bash
      run: |
        set -x
        eval "$(/usr/libexec/path_helper)"
        # Cf. <https://answers.launchpad.net/gcc-arm-embedded/+question/681980>
        texi2dvi --version
        texi2dvi --help
        make distcheck
