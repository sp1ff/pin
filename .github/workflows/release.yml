# Setting up a release workflow for `pin`. Many thanks to
# BurntShushi from whom I shamelessly copied a lot of this
# <https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml>
name: release
on:
  # This permits this workflow to be triggered manually. See the
  # environment variable RELEASE_VERSION below, however.
  workflow_dispatch:
  # Modifying the push event with 'branches' and 'tags' seems to be an
  # OR operation (i.e. the workflow will run if either on branch
  # release-infra *or* it has a tag of n.n.n)
  push:
    # Un-comment this for testing
    # branches:
    #   - release-infra
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  # This job will create the GitHub release
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    # Un-comment this for testing
    # env:
    #   RELEASE_VERSION: 0.2.4
    steps:
      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Get the release version from the tag
        if: env.RELEASE_VERSION == ''
        run: |
          # https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RELEASE_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ env.RELEASE_VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  # This job will actually create the artifacts I want to include with the release
  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, macos]
        include:
        - build: linux
          os: ubuntu-22.04
          rust: stable
          target: x86_64-unknown-linux
        - build: macos
          os: macos-10.15
          rust: stable
          target: x86_64-apple-darwin
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Install Tools (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      shell: bash
      run: |
          set -x
          pwd
          sudo apt-get install -y autoconf automake emacs liblzma-dev texlive

    - name: Install Tools (macOS)
      if: matrix.os == 'macos-10.15'
      shell: bash
      run: |
          set -x
          pwd
          brew update
          brew upgrade
          brew install autoconf automake emacs
          brew install --cask basictex

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true

    - name: Configure pin
      shell: bash
      run: |
        set -x
        ./bootstrap && ./configure

    - name: Get release download URL
      uses: actions/download-artifact@v1
      with:
        name: artifacts
        path: artifacts

    - name: Set release upload URL and release version
      shell: bash
      run: |
        release_upload_url="$(cat artifacts/release-upload-url)"
        echo "RELEASE_UPLOAD_URL=$release_upload_url" >> $GITHUB_ENV
        echo "release upload url: $RELEASE_UPLOAD_URL"
        release_version="$(cat artifacts/release-version)"
        echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV
        echo "release version: $RELEASE_VERSION"

    - name: Build pin
      run: |
        make all dist
        echo "DISTRO_GZ=pin-${{ env.RELEASE_VERSION }}.tar.gz" >> $GITHUB_ENV
        echo "DISTRO_XZ=pin-${{ env.RELEASE_VERSION }}.tar.xz" >> $GITHUB_ENV
        echo "DISTRO_ZST=pin-${{ env.RELEASE_VERSION }}.tar.zst" >> $GITHUB_ENV

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      shell: bash
      run: |
        cd pin
        strip target/release/pin

    - name: Build archive
      shell: bash
      run: |
        set -x
        pwd
        ls pin
        staging="pin-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
        mkdir -p "$staging"/{bin,doc}
        cp -v {README.org,AUTHORS,ChangeLog,COPYING,NEWS,THANKS} "$staging/doc/"
        cp -v doc/pin.info "$staging/doc/"
        cp -v pin/target/release/pin "$staging/bin/"
        tar czf "$staging.tar.gz" "$staging"
        echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

    - name: Upload gzip tarball
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.DISTRO_GZ }}
        asset_name: ${{ env.DISTRO_GZ }}
        asset_content_type: application/octet-stream

    - name: Upload xzip tarball
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.DISTRO_XZ }}
        asset_name: ${{ env.DISTRO_XZ }}
        asset_content_type: application/octet-stream

    - name: Upload zst tarball
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.DISTRO_ZST }}
        asset_name: ${{ env.DISTRO_ZST }}
        asset_content_type: application/octet-stream
