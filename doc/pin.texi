\input texinfo   @c -*- texinfo -*-
@c %**start of header
@setfilename pin.info
@settitle pin
@include version.texi
@c %**end of header

@dircategory Tool
@direntry
* pin: (pin). Manage your Pinboard links.
@end direntry

@copying
This manual corresponds to pin version @value{VERSION}.

Copyright @copyright{} 2022 Michael Herstine <sp1ff@@pobox.com>

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

A copy of the license is also available from the Free Software
Foundation Web site at @url{https://www.gnu.org/licenses/fdl.html}.

@end quotation

This document was typeset with
@uref{http://www.texinfo.org/, GNU Texinfo}.

@end copying

@c title & copyright-- won't appear in online output.
@titlepage
@title pin
@subtitle Manage your Pinboard links
@author @email{sp1ff@@pobox.com}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@c ``top'' node-- this is the start of the online output, but doesn't
@c appear in the printed manual
@ifnottex
@node Top
@top pin

Manage your Pinboard links.

This manual corresponds to pin version @value{VERSION}.

@end ifnottex

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Introduction::
* Things You Can Do With the Program::
* Configuration::
* Technical Details::
* Roadmap & Contributing::
* Index::
@end menu

@node Introduction
@chapter Introduction
@cindex Introduction

@url{https://pinboard.in/,Pinboard} is "social bookmarking for
introverts"-- a social bookmarking web service along the lines of (the
now defunct)
@url{https://en.wikipedia.org/wiki/Delicious_(website),del.icio.us}.
@cindex Pinboard
@cindex del.icio.us
@url{https://github.com/sp1ff/pin,pin} is a command-line client for
Pinboard. With it, you can send links to Pinboard (among other tasks)
programmatically, or perform operations that are inconvenient from the
web application such as generate a report on your tags.

The author, for instance, uses it, along with @url{https://www.gnu.org/software/emacs/,Emacs}
@url{https://orgmode.org/worg/org-contrib/org-protocol.html,org-protocol},
@cindex Emacs
@cindex Org-Mode
@cindex Org Protocol
to
@url{https://www.unwoundstack.com/blog/org-capture-to-pinboard.html,capture}
links from the browser and store them simultaneously in his notes and
on Pinboard.

@node Things You Can Do With the Program
@chapter Things You Can Do With the Program

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Sending Links to Pinboard::
* Deleting Links::
* Reporting On Your Tags::
* Renaming Tags::
@end menu

@node Sending Links to Pinboard
@section Sending Links to Pinboard
@cindex Sending Links

The original use case for @command{pin} was sending links to Pinboard
from the command line, or in situations where the only interface
available was process-based.

In Pinboard terms, a link is a ``post'', or a ``bookmark'', and it has
certain attributes. The two mandatory attributes are:
@cindex Post
@cindex Bookmark

@enumerate

@item url
The URL being saved, as defined in
@url{http://www.apps.ietf.org/rfc/rfc3986.html,RFC3986}. Allowed
schemes are http, https, javascripts, mailto, ftp & file.
@cindex URL

@item description
The display name for the link. Per the API
@url{https://pinboard.in/api/#posts_add,docs}, ``This field is
unfortunately named 'description' for backwards compatibility with the
delicious API'' The description must be fewer than 256 characters in
length (@pxref{Technical Details}).
@cindex Description

@end enumerate

A post has several other optional attributes. @command{pin} supports
the following:

@enumerate

@item tags
Zero or more tags, each less than 256 characters in length and may not
contain commas or whitespace. Tags beginning with a '.' are
``private''.
@cindex Tags

@item toread
Mark the post as ``unread''.

@end enumerate

The relevant sub-command is 'send', with arguments being the link or
links you'd like to send to Pinboard. The links may be given in one of
two ways. The first is simply giving the URL as an argument, in which
case the title will be taken from the @command{-T} or
@command{--title} option (which must be provided, in this case; it is
illegal to send a link with no title):

@example
pin send --title=foo http://foo.com
@end example

The other is to give arguments in the form ``URL | TITLE'' in which
case the title given for each argument will be preferred to the
@command{--title}

@example
pin send "http://foo.com | foo"
@end example

The latter form happens to be the export format of the One Tab FireFox
plugin.
@cindex One Tab

You can tag the links given as arguments as ``to be read later'' by
adding the @option{--read-later}. You can tags the links given with
the @option{--tag} option (which can of course be given more than
once).

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Instapaper::
* Targets::
* Reading URLs From File::
@end menu

@node Instapaper
@subsection Instapaper

``@url{https://wwww.instapaper.com,Instapaper} turns web content --
articles, stories, posts, videos, and even long emails â€“ into a great
reading experience.'' If you have an Instapaper account, you may wish
to send your links there at the same time as you send them to
Pinboard. You do this with the @option{--with-instapaper} option, but
you'll need to provide credentials.
@cindex Instapaper

You can give your username & password with @option{--username} and
@option{--password}, but see also @ref{Providing Your Credentials}.

@node Targets
@subsection Targets
@cindex Targets

The @command{send} sub-command offers quite a few options: marking its
arguments ``to be read later'', specifying tags, and sending to
Instapaper or not. It is likely that the user will develop certain
commonly-used combinations of these settings: one might mark tech
articles to be ``read later'', tag them ``@@review-tech'' and decline
to send them to Instaper, while marking long-form pieces as ``read
later'', tagging them ``@@review-long-form'' and sending them to
Instapaper for a more comfortable reading experience.

@command{pin} supports this through the notion of a ``target''. One
can, in the configuration file (@xref{Configuration}), define any
number of targets:

@example
[targets]

[targets.tech]
tags = ["@@review-tech"]
read_later = true
send_to_insty = false

[targets.long-form]
tags = ["@@review-long-form"]
read_later = true
send_to_insty = true
@end example

Then, when sending links to Pinboard, one can simply refer to a
pre-defined target. Instead of saying, e.g.:

@example
pin send --tag=@@review-long-form --read-later --with-instapaper "https://foo.com | Think Piece"
@end example

say:

@example
pin send --target=long-form "https://foo.com | Think Piece"
@end example

@node Reading URLs From File
@subsection Reading URLs From File
@cindex Reading URLs from file

It is sometimes convenient to send a collection of URLs to Pinboard
from file. For instance, the One Tab Firefox plugin allows the user to
export saved links to a plain text file in the format ``URL |
Title''. One can invoke pin on the contents of that file in one fell
swoop like so:

@example
cat links.txt|tr '\n' '\0'|xargs -0 pin send -I -r my-target
@end example

The input file may contain blank lines. In that case, it is convenient
to supply the @command{-I} option (or @command{--ignore-blank}); in
this case @command{pin} will simply ignore empty arguments, rather
than producing an error message & halting.

@node Deleting Links
@section Deleting Links
@cindex Deleting Links

Sometimes, you may want to delete links. The author, for instance,
uses Pinboard as a reference library that sometimes includes links to
documents only available on an employer's VPN. Once that employer has
been left, those documents are no longer available (or, frankly, of
interest).

One can of course delete links directly, simply by saying @command{pin
delete URL...}, but this is likely to prove tedious. Therefore, you
can also delete by @emph{tags}.

To remove all links with a given tag, say:

@example
pin delete TAG
@end example

You can combine tags with the '+' symbol; this will select the set of
URLs who have all of the tags in the expression:

@example
pin delete TAG1+TAG2+TAG3
@end example

will only delete links with all of @option{TAG1}, @option{TAG2} and
@option{TAG3}.

You can freely mix tags & URLs as arguments, like so:

@example
pin delete https://foo.com TAG1+TAG2+TAG3 http://bar.io TAG4
@end example

Since the Pinboard API only allows deleting a single post at a time,
this sub-command can result in a flood of API invocations subject to
rate-limiting, and so this command may take some time to complete. If
verbose output has not been requested, a progress bar will be
displayed (@pxref{Rate Limiting}).

If you'd like to just see a list of links that @emph{would} be
deleted, specify the @option{--dry-run} flag.

@node Reporting On Your Tags
@section Reporting On Your Tags
@cindex Tag Curation

The author has found that without regular curation, his tag collection
decays; typos creep in, similar tags are created to name the same
abstraction, and so forth. Periodically, one may want to get a report
one one's tags.

@command{pin get-tags} will do so. It will fetch all of the user's
tags from Pinboard and print them in a a few formats. By default, it
will produce an Emacs Org Mode-like table, but the @option{--csv}
option will instead cause it to produce output in Comma-Separated
Values format.

By default, the tags are sorted numerically by use; use the
@option{alphabetical} option to sort lexicographically.

By default, the tags are sorted in ascending order (whether
numerically or lexicographically); use the @option{--descending}
option to reverse that.

@node Renaming Tags
@section Renaming Tags
@cindex Renaming Tags

Having discovered a typo in one's tagging scheme, one may wish to
correct it: just say @command{pin rename-tag OLD NEW} to rename all
instances of the old tag name to the new.

@node Configuration
@chapter Configuration
@cindex Configuration

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Providing Your Credentials::
* The Configuration File::
@end menu

@node Providing Your Credentials
@section Providing Your Credentials
@cindex Credentials

Pinboard @url{https://pinboard.in/api/,API} callers may authenticate
using the HTTP Basic Authentication scheme with the credentials
@url{https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#basic_authentication_scheme,
provided} in the URL
(i.e. @samp{https://username:password@@api.pinboard.in/v1/method}) or
with an API key provided in the query parameters
(i.e. @samp{https://api.pinboard.in/v1/method?auth_token=user:NNNNNN}).
Given the obvious security concerns in the former, @command{pin} only
supports the latter. You can find your API key
@url{https://pinboard.in/settings/password,here} once you've signed-up
& logged-in.

You can provide that token to @command{pin} in one of the following
three ways:

@enumerate

@item
Specify it in the @option{--token} global option

@item
Specify it in the @code{PINBOARD_API_TOKEN} environment variable

@item
Specify it in your configuration file. If you choose this root, you
should be careful to set the file permission on that file
appropriately (@code{600}, for instance).

@end enumerate

Instapaper credentials may be provided as parameters to the
@command{send} sub-command, in the environment variables
@code{INSTAPAPER_USERNAME} and @code{INSTAPAPER_PASSWORD} or in the
configuration file (@pxref{The Configuration File}).

@node The Configuration File
@section The Configuration File
@cindex Configuration File

@command{pin} offers many options. The user may find it convenient to
collect some of them in a configuration file (@code{~/.pin} by
default) that will be read by the tool on invocation rather than
specifying them every time on the command line.

The configuration file is in TOML format, and all items are optional:

@enumerate

@item
version
File format version (zero by default).

@item
token
The user's Pinboard token.

@item
username
The user's Instapaper username.

@item
password
The user's Instapaper password

@item
targets

Targets (@pxref{Targets}) are specified in their own section
``[targets]'', and each target has its own section ``[targets.NAME]''
(see below for an example). Each target may have one or more of the
following attributes:
@enumerate

@item
tags
A vector of Tags, encoded as strings.

@item
read_later
A boolean indicating whether or not posts sent to this target should
be tagged as ``to be read later''.

@item
send_to_insty
A boolean indicating whether links sent to this target should also be
sent to Instapaper.

@end enumerate

@end enumerate

A complete sample configuration file:

@example
# Instapaper username
username = "jdoe@@gmail.com"
# Pinboard API token
token ="jdoe:DECADE90C0DEDDABB1ED"

[targets]

[targets.tech]
tags = ["@@review-tech", "tech"]
read_later = true
send_to_insty = false
@end example

@node Technical Details
@chapter Technical Details

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Encodings::
* Rate Limiting::
@end menu

@node Encodings
@section Encodings
@cindex Encodings
@cindex Grapheme Clusters

All textual entities shall be UTF-8 encoded. The API
@url{https://pinboard.in/api/#encoding,docs} state that ``'characters'
means logical characters rather than bytes''. @command{pin} interprets
that to mean grapheme clusters and uses the
@url{https://unicode-rs.github.io/unicode-segmentation/unicode_segmentation/index.html,unicode_segmentation}
crate to identify them.

@node Rate Limiting
@section Rate Limiting
@cindex Rate Limiting

Both the Pinboard & Instapaper APIs reserve the right to rate-limit
callers. In the case of Pinboard, the advertised acceptable rate for
most endpoints is one request every three seconds (much worse for a
few selected endpoints), but the author has seen far better than that
in the wild. The docs @url{https://pinboard.in/api#limits,suggest}:
``Make sure your API clients check for 429 Too Many Requests server
errors and back off appropriately. If possible, keep doubling the
interval between requests until you stop receiving errors.''

Instapaper is a bit more coy, only
@url{https://www.instapaper.com/api/simple,alluding} to rate-limiting
in their documentation for a 400 response code as being returned for
``a bad request or exceeded the rate limit''. The rate limit is never
defined, and the author has never encountered it in the wild.

Regardless, this implementation will take into account the possibility
of rate-limiting by retrying on certain status codes, halving the
request rate each time.

@node Roadmap & Contributing
@chapter Roadmap & Contributing

@command{pin} is still early code; its version number @value{VERSION}
is selected to indicate that.

The package is intended to provide an interface organized around user
operations, not API endpoints, so new operations will be added when &
as they are requested.

Bugs, comments, problems, PRs, feature requests &c welcome at
@email{sp1ff@@pobox.com}, @url{https://github.com/sp1ff/pin/,Github}
or shoot a webmention to me at my
@url{https://www.unwoundstack.com,web site}.

@node Index
@unnumbered Index

@printindex cp

@bye
